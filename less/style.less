// Variables

@height_header: 120px;    // Using the header as a base keeps things consistent.

@now: 0.0ms;              // This is a system I borrowed from some previous
@run: 250ms;              // projects of mine. They're basically just run times
@run_faster: @run / 10.0; // based on a single master run time. Using these for
@run_fast:   @run / 2.50; // transition durations and delays helps me keep
@run_slow:   @run * 1.50; // animations consistent and lets me easily slow things
@run_slower: @run * 2.00; // down for making detailed changes.

// Functions

.cascade(@c) when (@c > 0) {            //
  .cascade((@c - 1));                   // Simple for loops that lets me add
  &:nth-child(@{c}) {                   // stacking transition delays to
    transition-delay: @run_faster * @c; // designated sibling elements. This
  }                                     // creates a delightful cascade effect
}                                       // for animations.

// Misc.

* { &, &::before, &::after {box-sizing: border-box;}}

// DOM Elements

html {
  font-family: 'Helvetica Neue', Helvetic, Arial, sans-serif;
  font-size: 16px;
  color: #4a4a4a;
  -webkit-font-smoothing: antialiased;
  width: 100%;
}
body {
  width: 100%;
}

// Global by attribute

[role="button"] {  // This is useful for using anchors without hrefs, since I
  cursor: pointer; // don't actually want to go anywhere when I click things.
}
[class|="icon"] {
  width: 1.5rem;
  height: 1.5rem;
  fill: #ebebeb;
  transition: fill @run;
}

// Common Elements

.background {         //
  position: absolute; // Using child elements as background fills rather than
  top: 0;             // adding a background to a wrapper, is a trick I learned
  left: 0;            // from working on Precursor. It let's me animate state
  width: 100%;        // changes with more control and prevents me from having
  height: 100%;       // to do transform within transforms.
}
.toolbar {
  display: flex;
  justify-content: space-between;
  position: fixed;
  left: 0;
  width: 100%;
  z-index: 2;
  height: @height_header;
  transition: transform @run;
  .icon {
    display: flex;
    align-items: center;
    justify-content: center;
    width: @height_header;
    height: @height_header;
  }
  .background {
    background: #333;
  }
}
.make {             //
  transition: @run; // This is the 2nd part of the cascade function above.
  .cascade(10);     //
}
.heading {
  font-size: 2.5rem;
  font-weight: 500;
}

// Components

.app {
  &.opened { // When photo detail is open.
    &.show-tools { // Gets toggled w/ jQuery when the photo details is tapped.
      .photo-title {
        transform: translateY(@height_header);
        transition-delay: @run_faster;
      }
      .app-foot {
        .make {
          transform: translateY(-@height_header);
        }
      }
    }
    &:not(.show-tools) {
      .app-head {
        .make {
          transform: translateY(-@height_header);
        }
      }
      .toolbar {
        .background {
          transition-delay: @run;
        }
      }
    }
    .app-head {
      background: fade(#f5f5f5, 0);
      box-shadow: none;
      transition-delay: @now;
    }
    .app-head-title {
      transform: translateY(-@height_header);
    }
    .thumb {
      transform: translateX(-250%);
      transition-duration: @run_slower;

    }
  }
  &:not(.opened) {  // when photo detail is closed (using :not saves me from having to override base styles)
    .app-head-title {
      transition-delay: @run_slow;
    }
    .app-body {
      .background {
        background: #333;
        transform: translateX(100%);
        transition-duration: @run;
        transition-delay: @run_fast;
      }
    }
    .close {
      transform: translateY(-@height_header);
    }
    .toolbar {
      .icon {
        transition-delay: @now;
      }
      .background {
        transition-delay: @now;
      }
    }
    .photo-detail {
      pointer-events: none;
      transform: translateX(100%);
      transition-duration: @run;
      transition-delay: @now;
    }
  }
  &:not(.show-tools) {
    .app-head {
      .background {
        transform: translateY(-@height_header);
      }
    }
  }
}
.app-head {
  align-items: center;
  justify-content: center;
  top: 0;
  background: fade(#f5f5f5, 100);
  box-shadow: 0 -2px #e3e3e3 inset;
  transition: @run @run_slower;
}
.app-foot {
  top: 100%;
  transition-delay: @run_fast;
  .icon {
    position: relative;
  }
}
.app-head-title {
  position: relative;
}
.close {
  position: absolute;
  top: 0;
  right: 0;
}
.app-body {
  position: relative;
  min-height: 100vh;
  padding: 2rem;
  overflow: hidden;
  .background {
    background: #000;
    transition-duration: @run_slow;
    transition-delay: @run;
  }
}
.gallery {
  display: flex;
  flex-wrap: wrap;
  margin-top: @height_header;
}
.thumb {
  flex: 0 0 50%;
  display: block;
  margin-bottom: 1rem;
  transition: transform @run_slower;
  &:nth-of-type(odd) {
    padding-right: .5rem;
  }
  &:nth-of-type(even) {
    padding-left: .5rem;
  }
}
.thumbnail {
  display: block;
  width: 100%;
  height: auto;
}
.photo-detail {
  display: flex;
  align-items: center;
  position: fixed;
  z-index: 1;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  transition: transform @run_slower @run;
  img {
    width: 100%;
    pointer-events: none;
  }
}
.catch {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}
.photo-title {
  color: #ebebeb;
  display: flex;
  align-items: center;
  justify-content: center;
  position: fixed;
  bottom: 100%;
  left: 0;
  z-index: 3;
  width: 100%;
  height: @height_header;
  transition: transform @run @now;
  pointer-events: none;
  &:before {
    content: attr(data-title); // Passing this through attr should prevent and obivous XSS vulnerability.
  }
}
